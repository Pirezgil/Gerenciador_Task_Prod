version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gerenciador_postgres_prod
    environment:
      POSTGRES_DB: gerenciador_task
      POSTGRES_USER: gerenciador_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/backup:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - gerenciador_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gerenciador_user -d gerenciador_task"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gerenciador_backend_prod
    env_file:
      - .env.prod
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://gerenciador_user:${POSTGRES_PASSWORD}@postgres:5432/gerenciador_task
    volumes:
      - uploads_data:/app/uploads
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - gerenciador_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Next.js
  frontend:
    build:
      context: .
      dockerfile: deploy/Dockerfile.frontend
    container_name: gerenciador_frontend_prod
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://${SERVER_IP}:3001/api
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - gerenciador_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Opcional)
  nginx:
    image: nginx:alpine
    container_name: gerenciador_nginx_prod
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - gerenciador_network

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local

networks:
  gerenciador_network:
    driver: bridge