{
  "permissions": {
    "allow": [
      "Bash(npm run build:*)",
      "Bash(npx tsc:*)",
      "Bash(npm run dev:*)",
      "Bash(truncate:*)",
      "Bash(mkdir:*)",
      "Bash(npm install:*)",
      "Bash(npx prisma generate:*)",
      "Bash(npx ts-node:*)",
      "Bash(curl:*)",
      "Bash(taskkill:*)",
      "Bash(cmd /c:*)",
      "Bash(powershell:*)",
      "Bash(mv:*)",
      "Bash(npx prisma migrate dev:*)",
      "Bash(npx prisma studio --port 5555)",
      "Bash(npx prisma:*)",
      "Bash(node:*)",
      "Bash(del debug-user.js fix-user.js)",
      "Bash(rm:*)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(copy:*)",
      "Bash(cp:*)",
      "Bash(timeout 60 tail -f backend.log)",
      "Bash(claude config set language pt-BR)",
      "Bash(claude config set --global language pt-BR)",
      "Bash(grep:*)",
      "Bash(npx next lint:*)",
      "Bash(del check-user.js create-demo-user.js)",
      "WebFetch(domain:localhost)",
      "Bash(npm test)",
      "Bash(ESLINT_NO_DEV_ERRORS=true npm run dev)",
      "Bash(del check-habit.js)",
      "Bash(touch:*)",
      "Bash(del test-habits.js test-habits-api.js get-user-id.js)",
      "Bash(timeout 5 npm run build)",
      "Bash(timeout 10 npm run build)",
      "Bash(set ESLINT_NO_DEV_ERRORS=true)",
      "Bash(del \"C:\\Users\\Gilmar Pires\\Desktop\\Projetos\\Gerenciador_Task\\clear_user_data.js\")",
      "Bash(del \"C:\\Users\\Gilmar Pires\\Desktop\\Projetos\\Gerenciador_Task\\create_postponed_task.js\")",
      "Bash(del \"C:\\Users\\Gilmar Pires\\Desktop\\Projetos\\Gerenciador_Task\\backend\\create_postponed_task.js\")",
      "Bash(npx eslint:*)",
      "Bash(del \"C:\\Users\\Gilmar Pires\\Desktop\\Projetos\\Gerenciador_Task\\create_test_task.js\")",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node update_task_date.js)",
      "Bash(del update_task_date.js)",
      "Bash(del backendupdate_test.js)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_recurring_tasks.cjs)",
      "Bash(del:*)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node setup_overdue_task_test.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node adjust_planned_task_test.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node fix_planned_for_today.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node get_task_info.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node setup_recurring_task_test.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native npx prisma generate)",
      "Bash(timeout 10 npm run dev)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node -e \"const { PrismaClient } = require(''@prisma/client''); const prisma = new PrismaClient(); prisma.project.findMany().then(projects => { console.log(''Projetos encontrados:'', projects.length); console.log(projects); }).catch(err => console.error(err)).finally(() => prisma.$disconnect());\")",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_projects.js)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_projects.cjs)",
      "Bash(set DATABASE_URL=postgresql://postgres:20262595@localhost:5432/banco_sentinela)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_task.js)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_task.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_task_editing.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_specific_task.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_current_user.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node analyze_user_context.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_recurring_appointment_tasks.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node create_appointment_task.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_recurring_task_api.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_appointment_task_api.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_edit_functionality.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_task_flow.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_task_recurrence.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node verify_task_again.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_recurrence_update.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node debug_update_flow.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_users.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node create_test_user.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node create_recurring_task_test.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_with_curl.cjs)",
      "Bash(timeout 30 npm run build)",
      "Bash(timeout 25 npm run build)",
      "Bash(timeout 20 npm run build)",
      "Bash(npx next:*)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_reminders_flow.cjs)",
      "Bash(timeout:*)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node debug_reminder_limit.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_edge_cases_fix.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_custom_errors.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_rate_limiting_security.cjs)",
      "Bash(test_rate_limit_batch.bat)",
      "Bash(./test_rate_limit_batch.bat)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_error_handling.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_reminder.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native npx prisma migrate dev --name \"add-reminder-interval-fields\")",
      "Bash(psql:*)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node -r ts-node/register src/scripts/applyPerformanceIndexes.ts)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native npx prisma migrate dev --name \"add-push-subscriptions\")",
      "Bash(npx web-push:*)",
      "Bash(PORT=3002 timeout 10 npm run dev)",
      "Bash(PORT=3333 npm run dev)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node -p \"process.env.DATABASE_URL\")",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native npx prisma migrate dev --name \"add-password-reset-fields\")",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_push_subscriptions.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_user_push_subscriptions.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node ../check_user_push_subscriptions.cjs)",
      "Bash(move check_user_push_subscriptions.cjs backend/)",
      "Bash(npx tailwindcss:*)",
      "Bash(ESLINT_NO_DEV_ERRORS=true timeout 10 npm run dev)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_reminders.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node ../create_test_reminder.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node create_test_reminder.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node update_reminder_time.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node remove_corrupted_subscription.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_notifications_fix.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_task_reminders.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_push_subs.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node ../check_push_subs.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node ../create_test_push_subscription.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node ../test_push_detailed.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node ../check_subscriptions_detailed.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node ../create_real_push_subscription.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node ../create_mock_valid_subscription.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node ../check_specific_task.cjs)",
      "Bash(move check_specific_task.cjs backend/)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node analyze_reminders_system.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_specific_reminder.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_overdue_reminders.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_scheduler_manual.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node debug_overdue_reminders.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_create_reminder_for_target_task.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node monitor_test_reminder.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node create_test_push_subscription.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_push_detailed.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_final_test_reminder.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node create_test_reminder_debug.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node ../create_test_reminder_debug.cjs)",
      "Bash(cd:*)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node security_audit.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node db_test.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_push_system.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node verificar_push_status.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node ativar_push_subscriptions.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_auth_backend.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native npx prisma migrate dev --name \"add-security-logs\")",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node -e \"\nconst { PrismaClient } = require(''@prisma/client'');\nconst prisma = new PrismaClient();\n\nasync function reativarPushSubscription() {\n  try {\n    console.log(''🔧 Reativando push subscription para o usuário...'');\n    \n    const result = await prisma.pushSubscription.update({\n      where: {\n        id: ''cme79b8gq0001ea21a7golkp2''\n      },\n      data: {\n        isActive: true\n      }\n    });\n    \n    console.log(''✅ Push subscription reativada com sucesso!'');\n    console.log(''📋 Detalhes:'');\n    console.log(''- ID:'', result.id);\n    console.log(''- Usuário:'', result.userId);\n    console.log(''- Endpoint:'', result.endpoint.substring(0, 50) + ''...'');\n    console.log(''- Status:'', result.isActive ? ''ATIVA ✅'' : ''INATIVA ❌'');\n    console.log(''- Atualizada em:'', result.updatedAt);\n    \n    console.log(''\\n🔔 Agora o usuário receberá notificações push nos próximos lembretes!'');\n    \n  } catch (error) {\n    console.error(''❌ Erro ao reativar push subscription:'', error.message);\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\nreativarPushSubscription();\n\")",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node reativar_push_subscription.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node -e \"\nconst { PrismaClient } = require(''@prisma/client'');\nconst prisma = new PrismaClient();\n\nasync function verificarStatus() {\n  try {\n    const activeSubs = await prisma.pushSubscription.findMany({\n      where: {\n        userId: ''cme1wvcwt0000qpvbb8b6yqj6'',\n        isActive: true\n      }\n    });\n    \n    console.log(''📊 Push subscriptions ATIVAS para o usuário:'', activeSubs.length);\n    \n    if (activeSubs.length > 0) {\n      console.log(''✅ STATUS: Usuário está configurado para receber notificações push!'');\n      console.log(''⏰ Próximo lembrete será enviado via push notification.'');\n    } else {\n      console.log(''❌ STATUS: Nenhuma subscription ativa encontrada.'');\n    }\n    \n  } catch (error) {\n    console.error(''❌ Erro:'', error.message);\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\nverificarStatus();\n\")",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_reminder_persistence.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_reminder_scheduler.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node frontend_notification_test.cjs)",
      "Bash(move frontend_notification_test.cjs backend/)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_push_notifications_complete.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node -e \"\nconst { PrismaClient } = require(''@prisma/client'');\nconst prisma = new PrismaClient();\n\nasync function checkCorruptedSubscription() {\n  try {\n    console.log(''🔍 Verificando subscription com erro...'');\n    \n    const subscription = await prisma.pushSubscription.findUnique({\n      where: {\n        id: ''cme8kvxe900011448dp9f3d2o''\n      }\n    });\n    \n    if (subscription) {\n      console.log(''📋 Subscription encontrada:'');\n      console.log(''- ID:'', subscription.id);\n      console.log(''- Endpoint:'', subscription.endpoint);\n      console.log(''- p256dh length:'', subscription.p256dh?.length || ''null'');\n      console.log(''- auth length:'', subscription.auth?.length || ''null'');\n      console.log(''- Expected p256dh length: 65 bytes'');\n      console.log(''- Is Active:'', subscription.isActive);\n      \n      if (subscription.p256dh && subscription.p256dh.length !== 65) {\n        console.log(''❌ PROBLEMA: p256dh tem comprimento incorreto!'');\n        console.log(''- Comprimento atual:'', subscription.p256dh.length);\n        console.log(''- Comprimento esperado: 65'');\n      }\n    } else {\n      console.log(''❌ Subscription não encontrada'');\n    }\n    \n  } catch (error) {\n    console.error(''❌ Erro:'', error.message);\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\ncheckCorruptedSubscription();\n\")",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_corrupted_subscription.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node fix_corrupted_subscriptions.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_fixed_push_system.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node verificar_push_user.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node -e \"\nconst { PrismaClient } = require(''@prisma/client'');\nconst prisma = new PrismaClient();\n\nasync function main() {\n  try {\n    const subs = await prisma.pushSubscription.findMany({\n      where: { userId: ''cme1wvcwt0000qpvbb8b6yqj6'' }\n    });\n    \n    console.log(''Subscriptions:'', subs.length);\n    \n    if (subs.length > 0) {\n      subs.forEach(sub => {\n        console.log(''ID:'', sub.id, ''Active:'', sub.isActive);\n      });\n      \n      // Reativar todas\n      const result = await prisma.pushSubscription.updateMany({\n        where: {\n          userId: ''cme1wvcwt0000qpvbb8b6yqj6'',\n          isActive: false\n        },\n        data: { isActive: true }\n      });\n      \n      console.log(''Reativadas:'', result.count);\n    } else {\n      console.log(''Nenhuma subscription encontrada'');\n    }\n  } catch (e) {\n    console.error(''Erro:'', e.message);\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\nmain();\n\")",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node ativar_push_user.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_user_info.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_push_permissions.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_user_push_final.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node create_test_push_subscription_final.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_final_system.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node -e \"\nconst { PrismaClient } = require(''@prisma/client'');\nconst prisma = new PrismaClient();\n\nasync function checkP256dhLength() {\n  try {\n    const subscription = await prisma.pushSubscription.findUnique({\n      where: { id: ''cme8mnuqx000112boqcpia1at'' }\n    });\n    \n    console.log(''🔍 Verificando subscription problemática:'');\n    console.log(''ID:'', subscription.id);\n    console.log(''p256dh length:'', subscription.p256dh ? subscription.p256dh.length : ''null'');\n    console.log(''p256dh value:'', subscription.p256dh);\n    console.log(''Expected length: 65 bytes'');\n    console.log(''Actual length:'', subscription.p256dh ? subscription.p256dh.length : 0);\n    \n  } catch (error) {\n    console.error(''Erro:'', error.message);\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\ncheckP256dhLength();\n\")",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node create_valid_subscription.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node create_final_valid_subscription.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node -e \"\nconst { PrismaClient } = require(''@prisma/client'');\nconst prisma = new PrismaClient();\nasync function check() {\n  const subs = await prisma.pushSubscription.findMany({\n    where: { userId: ''cme1wvcwt0000qpvbb8b6yqj6'' }\n  });\n  console.log(''Total subs:'', subs.length);\n  subs.forEach(s => console.log(''ID:'', s.id, ''Active:'', s.isActive));\n  await prisma.$disconnect();\n}\ncheck();\n\")",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node -e \"\nconst { PrismaClient } = require(''@prisma/client'');\nconst prisma = new PrismaClient();\nasync function ativarSubscription() {\n  const result = await prisma.pushSubscription.update({\n    where: { id: ''cme8mthwo0001tugh53liaiy9'' },\n    data: { isActive: true }\n  });\n  console.log(''Subscription ativada:'', result.id, ''Active:'', result.isActive);\n  await prisma.$disconnect();\n}\nativarSubscription();\n\")",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node create_real_push_subscription.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node -e \"\nconst { PrismaClient } = require(''@prisma/client'');\nconst prisma = new PrismaClient();\n\nasync function checkCorruptedSubscription() {\n  try {\n    // Buscar a subscription específica mencionada nos logs\n    const subscription = await prisma.pushSubscription.findFirst({\n      where: {\n        id: ''cme8mz75w0001249q0eoufo7y''\n      }\n    });\n    \n    if (subscription) {\n      console.log(''SUBSCRIPTION ENCONTRADA:'');\n      console.log(''ID:'', subscription.id);\n      console.log(''Endpoint:'', subscription.endpoint);\n      console.log(''UserId:'', subscription.userId);\n      console.log(''IsActive:'', subscription.isActive);\n      console.log(''P256dh Length:'', subscription.p256dh ? subscription.p256dh.length : ''null'');\n      console.log(''Auth Length:'', subscription.auth ? subscription.auth.length : ''null'');\n      console.log(''Created:'', subscription.createdAt);\n      console.log(''Updated:'', subscription.updatedAt);\n    } else {\n      console.log(''SUBSCRIPTION NÃO ENCONTRADA - pode ter sido removida automaticamente'');\n      \n      // Verificar subscriptions inativas do mesmo usuário\n      const inactiveCount = await prisma.pushSubscription.count({\n        where: {\n          userId: ''cme1wvcwt0000qpvbb8b6yqj6'',\n          isActive: false\n        }\n      });\n      \n      console.log(''Subscriptions inativas do usuário:'', inactiveCount);\n    }\n    \n  } catch (error) {\n    console.error(''Erro:'', error.message);\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\ncheckCorruptedSubscription();\n\")",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node -e \"\nconst { PrismaClient } = require(''@prisma/client'');\nconst prisma = new PrismaClient();\n\nasync function checkCorruptedSubscription() {\n  try {\n    const subscription = await prisma.pushSubscription.findFirst({\n      where: {\n        id: ''cme8mz75w0001249q0eoufo7y''\n      }\n    });\n    \n    if (subscription) {\n      console.log(''SUBSCRIPTION ENCONTRADA:'');\n      console.log(''ID:'', subscription.id);\n      console.log(''Endpoint:'', subscription.endpoint);\n      console.log(''UserId:'', subscription.userId);\n      console.log(''IsActive:'', subscription.isActive);\n      console.log(''P256dh Length:'', subscription.p256dh ? subscription.p256dh.length : ''null'');\n      console.log(''Auth Length:'', subscription.auth ? subscription.auth.length : ''null'');\n      console.log(''Created:'', subscription.createdAt);\n      console.log(''Updated:'', subscription.updatedAt);\n    } else {\n      console.log(''SUBSCRIPTION NÃO ENCONTRADA - pode ter sido removida automaticamente'');\n      \n      const inactiveCount = await prisma.pushSubscription.count({\n        where: {\n          userId: ''cme1wvcwt0000qpvbb8b6yqj6'',\n          isActive: false\n        }\n      });\n      \n      console.log(''Subscriptions inativas do usuário:'', inactiveCount);\n    }\n    \n  } catch (error) {\n    console.error(''Erro:'', error.message);\n  } finally {\n    await prisma.disconnect();\n  }\n}\n\ncheckCorruptedSubscription();\n\")",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node -e \"\nconst { PrismaClient } = require(''@prisma/client'');\nconst prisma = new PrismaClient();\n\nasync function testSubscriptionCleanup() {\n  try {\n    console.log(''🧪 TESTE DE SINCRONIZAÇÃO PROATIVA'');\n    console.log(''====================================='');\n    \n    // Verificar subscriptions corrompidas existentes\n    const corruptedSubs = await prisma.pushSubscription.findMany({\n      where: {\n        userId: ''cme1wvcwt0000qpvbb8b6yqj6'',\n        isActive: false\n      },\n      select: {\n        id: true,\n        endpoint: true,\n        isActive: true,\n        p256dh: true,\n        createdAt: true,\n        updatedAt: true\n      }\n    });\n    \n    console.log(''SUBSCRIPTIONS INATIVAS ENCONTRADAS:'', corruptedSubs.length);\n    \n    corruptedSubs.forEach((sub, index) => {\n      console.log(''  '', index + 1, ''- ID:'', sub.id);\n      console.log(''     - Endpoint:'', sub.endpoint.substring(0, 50) + ''...'');\n      console.log(''     - P256dh Length:'', sub.p256dh ? sub.p256dh.length : ''null'');\n      console.log(''     - Is Active:'', sub.isActive);\n      console.log(''     - Updated:'', sub.updatedAt.toISOString());\n      console.log('''');\n    });\n    \n    // Verificar subscriptions ativas\n    const activeSubs = await prisma.pushSubscription.findMany({\n      where: {\n        userId: ''cme1wvcwt0000qpvbb8b6yqj6'',\n        isActive: true\n      }\n    });\n    \n    console.log(''SUBSCRIPTIONS ATIVAS:'', activeSubs.length);\n    \n    console.log('''');\n    console.log(''✅ SISTEMA DE SINCRONIZAÇÃO PROATIVA PRONTO PARA TESTAR'');\n    console.log('''');\n    console.log(''FUNCIONALIDADES IMPLEMENTADAS:'');\n    console.log(''- ✅ Validação de comprimento de chaves p256dh/auth'');\n    console.log(''- ✅ Detecção de endpoints corrompidos'');\n    console.log(''- ✅ Limpeza automática via endpoint /cleanup-endpoint'');\n    console.log(''- ✅ Sincronização periódica (30min) e ao focar aba'');\n    console.log(''- ✅ Rate limiting implementado para evitar DoS'');\n    console.log(''- ✅ Tratamento de erro 404 no backend já funcional'');\n    \n  } catch (error) {\n    console.error(''Erro:'', error.message);\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\ntestSubscriptionCleanup();\n\")",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node -e \"\nconst { PrismaClient } = require(''@prisma/client'');\nconst prisma = new PrismaClient();\n\nasync function testSubscriptionCleanup() {\n  try {\n    console.log(''🧪 TESTE DE SINCRONIZAÇÃO PROATIVA'');\n    console.log(''====================================='');\n    \n    const corruptedSubs = await prisma.pushSubscription.findMany({\n      where: {\n        userId: ''cme1wvcwt0000qpvbb8b6yqj6'',\n        isActive: false\n      },\n      select: {\n        id: true,\n        endpoint: true,\n        isActive: true,\n        p256dh: true,\n        createdAt: true,\n        updatedAt: true\n      }\n    });\n    \n    console.log(''SUBSCRIPTIONS INATIVAS ENCONTRADAS:'', corruptedSubs.length);\n    \n    corruptedSubs.forEach((sub, index) => {\n      console.log(''  '', index + 1, ''- ID:'', sub.id);\n      console.log(''     - Endpoint:'', sub.endpoint.substring(0, 50) + ''...'');\n      console.log(''     - P256dh Length:'', sub.p256dh ? sub.p256dh.length : ''null'');\n      console.log(''     - Is Active:'', sub.isActive);\n      console.log(''     - Updated:'', sub.updatedAt.toISOString());\n      console.log('''');\n    });\n    \n    const activeSubs = await prisma.pushSubscription.findMany({\n      where: {\n        userId: ''cme1wvcwt0000qpvbb8b6yqj6'',\n        isActive: true\n      }\n    });\n    \n    console.log(''SUBSCRIPTIONS ATIVAS:'', activeSubs.length);\n    \n    console.log('''');\n    console.log(''✅ SISTEMA DE SINCRONIZAÇÃO PROATIVA PRONTO PARA TESTAR'');\n    console.log('''');\n    console.log(''FUNCIONALIDADES IMPLEMENTADAS:'');\n    console.log(''- ✅ Validação de comprimento de chaves p256dh/auth'');\n    console.log(''- ✅ Detecção de endpoints corrompidos'');\n    console.log(''- ✅ Limpeza automática via endpoint /cleanup-endpoint'');\n    console.log(''- ✅ Sincronização periódica (30min) e ao focar aba'');\n    console.log(''- ✅ Rate limiting implementado para evitar DoS'');\n    console.log(''- ✅ Tratamento de erro 404 no backend já funcional'');\n    \n  } catch (error) {\n    console.error(''Erro:'', error.message);\n  } finally {\n    await prisma.disconnect();\n  }\n}\n\ntestSubscriptionCleanup();\n\")",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node -e \"\nconst { PrismaClient } = require(''@prisma/client'');\nconst prisma = new PrismaClient();\n\nasync function checkTask() {\n  try {\n    console.log(''🔍 Consultando tarefa: cme2olk2f00018j7k7chw8owz'');\n    console.log(''=========================================='');\n    \n    const task = await prisma.task.findUnique({\n      where: {\n        id: ''cme2olk2f00018j7k7chw8owz''\n      },\n      include: {\n        user: {\n          select: {\n            id: true,\n            name: true,\n            email: true\n          }\n        },\n        project: {\n          select: {\n            id: true,\n            title: true,\n            color: true\n          }\n        },\n        reminders: {\n          select: {\n            id: true,\n            reminderTime: true,\n            isActive: true,\n            createdAt: true,\n            updatedAt: true\n          },\n          orderBy: {\n            reminderTime: ''asc''\n          }\n        },\n        comments: {\n          select: {\n            id: true,\n            content: true,\n            createdAt: true\n          },\n          orderBy: {\n            createdAt: ''desc''\n          }\n        }\n      }\n    });\n    \n    if (task) {\n      console.log(''✅ TAREFA ENCONTRADA:'');\n      console.log('''');\n      console.log(''📋 INFORMAÇÕES BÁSICAS:'');\n      console.log(''- ID:'', task.id);\n      console.log(''- Título:'', task.title);\n      console.log(''- Descrição:'', task.description || ''N/A'');\n      console.log(''- Status:'', task.status);\n      console.log(''- Prioridade:'', task.priority);\n      console.log(''- Progresso:'', task.progress + ''%'');\n      console.log('''');\n      \n      console.log(''📅 DATAS:'');\n      console.log(''- Data de Vencimento:'', task.dueDate ? new Date(task.dueDate).toLocaleString(''pt-BR'') : ''N/A'');\n      console.log(''- Criada em:'', new Date(task.createdAt).toLocaleString(''pt-BR''));\n      console.log(''- Atualizada em:'', new Date(task.updatedAt).toLocaleString(''pt-BR''));\n      console.log('''');\n      \n      console.log(''👤 USUÁRIO:'');\n      console.log(''- Nome:'', task.user.name);\n      console.log(''- Email:'', task.user.email);\n      console.log(''- ID do Usuário:'', task.user.id);\n      console.log('''');\n      \n      if (task.project) {\n        console.log(''📂 PROJETO:'');\n        console.log(''- Nome:'', task.project.title);\n        console.log(''- Cor:'', task.project.color);\n        console.log(''- ID do Projeto:'', task.project.id);\n        console.log('''');\n      } else {\n        console.log(''📂 PROJETO: Nenhum projeto associado'');\n        console.log('''');\n      }\n      \n      console.log(''🔔 LEMBRETES ('' + task.reminders.length + ''):'');\n      if (task.reminders.length > 0) {\n        task.reminders.forEach((reminder, index) => {\n          console.log(''  '' + (index + 1) + ''. ID:'', reminder.id);\n          console.log(''     - Horário:'', new Date(reminder.reminderTime).toLocaleString(''pt-BR''));\n          console.log(''     - Ativo:'', reminder.isActive ? ''Sim ✅'' : ''Não ❌'');\n          console.log(''     - Criado em:'', new Date(reminder.createdAt).toLocaleString(''pt-BR''));\n          console.log('''');\n        });\n      } else {\n        console.log(''  Nenhum lembrete configurado'');\n        console.log('''');\n      }\n      \n      console.log(''💬 COMENTÁRIOS ('' + task.comments.length + ''):'');\n      if (task.comments.length > 0) {\n        task.comments.forEach((comment, index) => {\n          console.log(''  '' + (index + 1) + ''. '' + comment.content);\n          console.log(''     - Criado em:'', new Date(comment.createdAt).toLocaleString(''pt-BR''));\n          console.log('''');\n        });\n      } else {\n        console.log(''  Nenhum comentário'');\n        console.log('''');\n      }\n      \n      console.log(''🔄 RECORRÊNCIA:'');\n      console.log(''- É Recorrente:'', task.isRecurring ? ''Sim ✅'' : ''Não ❌'');\n      if (task.isRecurring) {\n        console.log(''- Tipo de Recorrência:'', task.recurrenceType);\n        console.log(''- Intervalo:'', task.recurrenceInterval);\n        console.log(''- Próxima Ocorrência:'', task.nextOccurrence ? new Date(task.nextOccurrence).toLocaleString(''pt-BR'') : ''N/A'');\n      }\n      console.log('''');\n      \n      console.log(''🏷️ OUTRAS INFORMAÇÕES:'');\n      console.log(''- Tags:'', task.tags || ''N/A'');\n      console.log(''- Estimativa de Tempo:'', task.estimatedTime || ''N/A'');\n      console.log(''- Tipo de Tarefa:'', task.taskType || ''N/A'');\n      console.log(''- Anexos:'', task.attachments ? ''Sim'' : ''Não'');\n      \n    } else {\n      console.log(''❌ TAREFA NÃO ENCONTRADA'');\n      console.log('''');\n      console.log(''🔍 Verificando se o ID existe em outras tabelas...'');\n      \n      // Verificar se existe como projeto\n      const project = await prisma.project.findUnique({\n        where: { id: ''cme2olk2f00018j7k7chw8owz'' }\n      });\n      \n      if (project) {\n        console.log(''ℹ️  ID encontrado como PROJETO:'', project.title);\n      } else {\n        console.log(''ℹ️  ID não encontrado em nenhuma tabela'');\n      }\n    }\n    \n  } catch (error) {\n    console.error(''❌ Erro ao consultar tarefa:'', error.message);\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\ncheckTask();\n\")",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node -e \"\nconst { PrismaClient } = require(''@prisma/client'');\nconst prisma = new PrismaClient();\n\nasync function checkTask() {\n  try {\n    console.log(''🔍 Consultando tarefa: cme2olk2f00018j7k7chw8owz'');\n    console.log(''=========================================='');\n    \n    const task = await prisma.task.findUnique({\n      where: {\n        id: ''cme2olk2f00018j7k7chw8owz''\n      },\n      include: {\n        user: {\n          select: {\n            id: true,\n            name: true,\n            email: true\n          }\n        },\n        project: {\n          select: {\n            id: true,\n            title: true,\n            color: true\n          }\n        },\n        reminders: {\n          select: {\n            id: true,\n            reminderTime: true,\n            isActive: true,\n            createdAt: true,\n            updatedAt: true\n          },\n          orderBy: {\n            reminderTime: ''asc''\n          }\n        },\n        comments: {\n          select: {\n            id: true,\n            content: true,\n            createdAt: true\n          },\n          orderBy: {\n            createdAt: ''desc''\n          }\n        }\n      }\n    });\n    \n    if (task) {\n      console.log(''✅ TAREFA ENCONTRADA:'');\n      console.log('''');\n      console.log(''📋 INFORMAÇÕES BÁSICAS:'');\n      console.log(''- ID:'', task.id);\n      console.log(''- Título:'', task.title);\n      console.log(''- Descrição:'', task.description || ''N/A'');\n      console.log(''- Status:'', task.status);\n      console.log(''- Prioridade:'', task.priority);\n      console.log(''- Progresso:'', task.progress + ''%'');\n      console.log('''');\n      \n      console.log(''📅 DATAS:'');\n      console.log(''- Data de Vencimento:'', task.dueDate ? new Date(task.dueDate).toLocaleString(''pt-BR'') : ''N/A'');\n      console.log(''- Criada em:'', new Date(task.createdAt).toLocaleString(''pt-BR''));\n      console.log(''- Atualizada em:'', new Date(task.updatedAt).toLocaleString(''pt-BR''));\n      console.log('''');\n      \n      console.log(''👤 USUÁRIO:'');\n      console.log(''- Nome:'', task.user.name);\n      console.log(''- Email:'', task.user.email);\n      console.log(''- ID do Usuário:'', task.user.id);\n      console.log('''');\n      \n      if (task.project) {\n        console.log(''📂 PROJETO:'');\n        console.log(''- Nome:'', task.project.title);\n        console.log(''- Cor:'', task.project.color);\n        console.log(''- ID do Projeto:'', task.project.id);\n      } else {\n        console.log(''📂 PROJETO: Nenhum projeto associado'');\n      }\n      console.log('''');\n      \n      console.log(''🔔 LEMBRETES ('' + task.reminders.length + ''):'');\n      if (task.reminders.length > 0) {\n        task.reminders.forEach((reminder, index) => {\n          console.log(''  '' + (index + 1) + ''. ID:'', reminder.id);\n          console.log(''     - Horário:'', new Date(reminder.reminderTime).toLocaleString(''pt-BR''));\n          console.log(''     - Ativo:'', reminder.isActive ? ''Sim ✅'' : ''Não ❌'');\n          console.log(''     - Criado em:'', new Date(reminder.createdAt).toLocaleString(''pt-BR''));\n          console.log('''');\n        });\n      } else {\n        console.log(''  Nenhum lembrete configurado'');\n      }\n      \n    } else {\n      console.log(''❌ TAREFA NÃO ENCONTRADA'');\n    }\n    \n  } catch (error) {\n    console.error(''❌ Erro ao consultar tarefa:'', error.message);\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\ncheckTask();\n\")",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_task_info.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_task_info_fixed.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node check_task_simple.cjs)",
      "Bash(npm run type-check:*)",
      "Bash(set PORT=3002)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_db_connection.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native npx prisma migrate status)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_rewards_flow.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node analyze_energy_tasks.cjs)",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node -e \"\nconst { PrismaClient } = require(''@prisma/client'');\nconst prisma = new PrismaClient();\n\nasync function testFinalEnergyCalculation() {\n  try {\n    console.log(''🎯 TESTE FINAL - NOVA LÓGICA DE ENERGIA IMPLEMENTADA'');\n    console.log(''=================================================='');\n    \n    const userId = ''cme1wvcwt0000qpvbb8b6yqj6'';\n    \n    // Simular exatamente a nova função getUserEnergyBudget\n    const user = await prisma.user.findUnique({\n      where: { id: userId },\n      include: { settings: true }\n    });\n\n    const dailyBudget = user?.settings?.dailyEnergyBudget || 12;\n\n    const plannedTasks = await prisma.task.findMany({\n      where: {\n        userId,\n        plannedForToday: true,\n        isDeleted: false\n      },\n      select: {\n        id: true,\n        energyPoints: true,\n        description: true,\n        status: true,\n        completedAt: true\n      }\n    });\n\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const tasksForEnergyCalculation = plannedTasks.filter(task => {\n      if (task.status === ''completed'' && task.completedAt) {\n        const completedDate = new Date(task.completedAt);\n        completedDate.setHours(0, 0, 0, 0);\n        \n        return completedDate.getTime() >= today.getTime();\n      }\n      return true;\n    });\n\n    const usedEnergy = tasksForEnergyCalculation.reduce((sum, task) => sum + (task.energyPoints || 0), 0);\n    const remaining = Math.max(0, dailyBudget - usedEnergy);\n    const completedCount = tasksForEnergyCalculation.filter(task => task.status === ''completed'').length;\n    \n    console.log(''👤 Usuário:'', user.name);\n    console.log(''💰 Orçamento diário:'', dailyBudget, ''pontos'');\n    console.log(''📋 Tarefas planejadas total:'', plannedTasks.length);\n    console.log(''✅ Tarefas incluídas no cálculo:'', tasksForEnergyCalculation.length);\n    console.log(''❌ Tarefas excluídas:'', plannedTasks.length - tasksForEnergyCalculation.length);\n    console.log('''');\n    \n    console.log(''🔋 RESULTADO FINAL:'');\n    console.log(''=================='');\n    console.log(''- Energia usada:'', usedEnergy, ''pontos'');\n    console.log(''- Energia restante:'', remaining, ''pontos'');\n    console.log(''- Tarefas completadas (hoje):'', completedCount);\n    console.log(''- Porcentagem usado:'', Math.round((usedEnergy / dailyBudget) * 100) + ''%'');\n    \n    let statusIcon, statusColor, statusLabel;\n    const percentage = (usedEnergy / dailyBudget) * 100;\n    if (percentage < 30) {\n      statusIcon = ''Battery'';\n      statusColor = ''text-green-500'';\n      statusLabel = ''Energia Alta'';\n    } else if (percentage < 70) {\n      statusIcon = ''Brain'';\n      statusColor = ''text-blue-500'';\n      statusLabel = ''Energia Normal'';\n    } else {\n      statusIcon = ''Zap'';\n      statusColor = ''text-orange-500'';\n      statusLabel = ''Energia Baixa'';\n    }\n    \n    console.log('''');\n    console.log(''🎨 COMO APARECERÁ NA SIDEBAR:'');\n    console.log(''============================'');\n    console.log(''- Ícone:'', statusIcon);\n    console.log(''- Cor:'', statusColor);\n    console.log(''- Label:'', statusLabel);\n    console.log(''- Texto: \"\"'' + remaining + '' de '' + dailyBudget + '' disponível\"\"'');\n    console.log(''- Barra de progresso:'', Math.round((remaining / dailyBudget) * 100) + ''% preenchida'');\n    console.log('''');\n    \n    console.log(''✅ SUCESSO! Nova lógica implementada:'');\n    console.log(''- Tarefas completadas ontem são excluídas do cálculo'');\n    console.log(''- Apenas tarefas pendentes + completadas hoje contam'');\n    console.log(''- Economia de '' + (47 - usedEnergy) + '' pontos de energia'');\n    \n  } catch (error) {\n    console.error(''❌ Erro:'', error.message);\n  } finally {\n    await prisma.disconnect();\n  }\n}\n\ntestFinalEnergyCalculation();\n\")",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node -e \"\nconst { calculateMissedDays } = require(''./src/utils/taskUtils.ts'');\n\n// Teste da função\nconsole.log(''🧪 TESTANDO NOVA FUNÇÃO DE CÁLCULO'');\nconsole.log(''================================'');\n\nconst hoje = new Date();\nconsole.log(''Data atual:'', hoje.toLocaleDateString(''pt-BR''));\n\n// Teste 1: Tarefa planejada há 7 dias\nconst setesDias = new Date();\nsetesDias.setDate(setesDias.getDate() - 7);\nconsole.log(''\\nTeste 1 - Tarefa planejada há 7 dias:'');\nconsole.log(''Data planejada:'', setesDias.toLocaleDateString(''pt-BR''));\nconsole.log(''Dias calculados:'', calculateMissedDays(setesDias));\n\n// Teste 2: Tarefa planejada ontem\nconst ontem = new Date();\nontem.setDate(ontem.getDate() - 1);\nconsole.log(''\\nTeste 2 - Tarefa planejada ontem:'');\nconsole.log(''Data planejada:'', ontem.toLocaleDateString(''pt-BR''));\nconsole.log(''Dias calculados:'', calculateMissedDays(ontem));\n\n// Teste 3: Tarefa planejada hoje\nconsole.log(''\\nTeste 3 - Tarefa planejada hoje:'');\nconsole.log(''Data planejada:'', hoje.toLocaleDateString(''pt-BR''));\nconsole.log(''Dias calculados:'', calculateMissedDays(hoje));\n\n// Teste 4: Tarefa planejada amanhã\nconst amanha = new Date();\namanha.setDate(amanha.getDate() + 1);\nconsole.log(''\\nTeste 4 - Tarefa planejada amanhã:'');\nconsole.log(''Data planejada:'', amanha.toLocaleDateString(''pt-BR''));\nconsole.log(''Dias calculados:'', calculateMissedDays(amanha));\n\n// Teste 5: Sem data planejada\nconsole.log(''\\nTeste 5 - Sem data planejada:'');\nconsole.log(''Data planejada: null'');\nconsole.log(''Dias calculados:'', calculateMissedDays(null));\n\")",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node -e \"\nfunction calculateMissedDays(plannedDate, currentDate) {\n  if (!plannedDate) {\n    return 0;\n  }\n\n  const today = currentDate || new Date();\n  today.setHours(0, 0, 0, 0);\n\n  const planned = new Date(plannedDate);\n  planned.setHours(0, 0, 0, 0);\n\n  if (planned.getTime() >= today.getTime()) {\n    return 0;\n  }\n\n  const daysDiff = Math.floor((today.getTime() - planned.getTime()) / (1000 * 60 * 60 * 24));\n  \n  return Math.max(0, daysDiff);\n}\n\nconsole.log(''🧪 TESTANDO NOVA FUNÇÃO DE CÁLCULO'');\nconsole.log(''================================'');\n\nconst hoje = new Date();\nconsole.log(''Data atual:'', hoje.toLocaleDateString(''pt-BR''));\n\n// Teste com a tarefa específica\nconst dataPlanejaada = new Date(''2025-08-13T00:00:00.000Z'');\nconsole.log(''\\n🎯 TESTE COM TAREFA ESPECÍFICA:'');\nconsole.log(''ID: cmeaejbar000lml01ikld71pm'');\nconsole.log(''Data planejada:'', dataPlanejaada.toLocaleDateString(''pt-BR''));\nconsole.log(''Dias calculados:'', calculateMissedDays(dataPlanejaada));\nconsole.log(''✅ Resultado correto! Antes era 7, agora é'', calculateMissedDays(dataPlanejaada));\n\")",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node -e \"\nfunction calculateMissedDays(plannedDate, currentDate) {\n  if (!plannedDate) {\n    return 0;\n  }\n\n  const today = currentDate || new Date();\n  today.setHours(0, 0, 0, 0);\n\n  const planned = new Date(plannedDate);\n  planned.setHours(0, 0, 0, 0);\n\n  if (planned.getTime() >= today.getTime()) {\n    return 0;\n  }\n\n  const daysDiff = Math.floor((today.getTime() - planned.getTime()) / (1000 * 60 * 60 * 24));\n  \n  return Math.max(0, daysDiff);\n}\n\nconsole.log(''🧪 TESTANDO NOVA FUNÇÃO DE CÁLCULO'');\nconsole.log(''================================'');\n\nconst hoje = new Date();\nconsole.log(''Data atual:'', hoje.toLocaleDateString(''pt-BR''));\n\n// Teste com a tarefa específica\nconst dataPlanejaada = new Date(''2025-08-13T00:00:00.000Z'');\nconsole.log('''');\nconsole.log(''🎯 TESTE COM TAREFA ESPECÍFICA:'');\nconsole.log(''ID: cmeaejbar000lml01ikld71pm'');\nconsole.log(''Data planejada:'', dataPlanejaada.toLocaleDateString(''pt-BR''));\nconsole.log(''Dias calculados:'', calculateMissedDays(dataPlanejaada));\nconsole.log(''✅ Resultado correto! Antes era 7, agora é'', calculateMissedDays(dataPlanejaada));\n\")",
      "Bash(PRISMA_CLI_BINARY_TARGETS=native node test_calculate_missed_days.cjs)"
    ],
    "deny": [],
    "defaultMode": "acceptEdits"
  }
}