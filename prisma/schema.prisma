generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String              @id @default(cuid())
  name                  String
  email                 String              @unique
  avatarUrl             String?             @map("avatar_url")
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @updatedAt @map("updated_at")
  emailVerified         Boolean             @default(false) @map("email_verified")
  googleId              String?             @unique @map("google_id")
  password              String?
  passwordResetToken    String?             @map("password_reset_token")
  passwordResetExpires  DateTime?           @map("password_reset_expires")
  achievements       Achievement[]
  dailyEnergyLogs    DailyEnergyLog[]
  dailyProgress      DailyProgress[]
  dopamineAnimations DopamineAnimation[]
  habitStreak        HabitStreak?
  habits             Habit[]
  notes              Note[]
  projects           Project[]
  pushSubscriptions  PushSubscription[]
  reminders          Reminder[]
  sandboxAuth        SandboxAuth?
  sandboxLayouts     SandboxLayout[]
  securityLogs       SecurityLog[]  // ETAPA 4: Logs de seguran√ßa
  tasks              Task[]
  themeConfigs       ThemeConfig[]
  settings           UserSettings?

  @@map("users")
}

model UserSettings {
  id                String   @id @default(cuid())
  userId            String   @unique @map("user_id")
  dailyEnergyBudget Int      @default(12) @map("daily_energy_budget")
  theme             String   @default("light")
  timezone          String   @default("America/Sao_Paulo")
  notifications     Boolean  @default(true)
  sandboxPassword   String?  @map("sandbox_password")
  sandboxEnabled    Boolean  @default(false) @map("sandbox_enabled")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model SandboxAuth {
  id             String    @id @default(cuid())
  userId         String    @unique @map("user_id")
  isUnlocked     Boolean   @default(false) @map("is_unlocked")
  lastUnlockTime DateTime? @map("last_unlock_time")
  failedAttempts Int       @default(0) @map("failed_attempts")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sandbox_auth")
}

model Project {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  name         String
  icon         String    @default("üìÅ")
  color        String    @default("#3B82F6")
  status       String    @default("active")
  deadline     DateTime? @db.Date
  sandboxNotes String?   @map("sandbox_notes")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks        Task[]

  @@map("projects")
}

model Task {
  id                 String              @id @default(cuid())
  userId             String              @map("user_id")
  projectId          String?             @map("project_id")
  description        String
  status             String              @default("pending")
  energyPoints       Int                 @map("energy_points")
  type               String              @default("task")
  isRecurring        Boolean             @default(false) @map("is_recurring")
  isAppointment      Boolean             @default(false) @map("is_appointment")
  dueDate            DateTime?           @map("due_date") @db.Date
  rescheduleDate     DateTime?           @map("reschedule_date") @db.Date
  postponementCount  Int                 @default(0) @map("postponement_count")
  postponementReason String?             @map("postponement_reason")
  externalLinks      String[]            @map("external_links")
  createdAt          DateTime            @default(now()) @map("created_at")
  completedAt        DateTime?           @map("completed_at")
  postponedAt        DateTime?           @map("postponed_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  plannedForToday    Boolean             @default(false) @map("planned_for_today")
  deletedAt          DateTime?           @map("deleted_at")
  isDeleted          Boolean             @default(false) @map("is_deleted")
  missedDaysCount    Int                 @default(0) @map("missed_days_count")
  plannedDate        DateTime?           @map("planned_date") @db.Date
  dopamineRefs       DopamineAnimation[]
  appointment        TaskAppointment?
  attachments        TaskAttachment[]
  comments           TaskComment[]
  history            TaskHistory[]
  recurrence         TaskRecurrence?
  project            Project?            @relation(fields: [projectId], references: [id])
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model TaskRecurrence {
  id            String    @id @default(cuid())
  taskId        String    @unique @map("task_id")
  frequency     String
  daysOfWeek    Int[]     @map("days_of_week")
  lastCompleted DateTime? @map("last_completed")
  nextDue       DateTime? @map("next_due")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  task          Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_recurrence")
}

model TaskAppointment {
  id              String   @id @default(cuid())
  taskId          String   @unique @map("task_id")
  scheduledTime   String   @map("scheduled_time")
  preparationTime Int      @default(0) @map("preparation_time")
  location        String?
  notes           String?
  reminderTime    Int?     @map("reminder_time")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  task            Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_appointments")
}

model TaskComment {
  id        String   @id @default(cuid())
  taskId    String   @map("task_id")
  author    String
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_comments")
}

model TaskAttachment {
  id         String   @id @default(cuid())
  taskId     String?  @map("task_id")
  noteId     String?  @map("note_id")
  name       String
  url        String
  type       String
  size       BigInt
  uploadedAt DateTime @default(now()) @map("uploaded_at")
  note       Note?    @relation(fields: [noteId], references: [id], onDelete: Cascade)
  task       Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_attachments")
}

model TaskHistory {
  id        String   @id @default(cuid())
  taskId    String   @map("task_id")
  action    String
  timestamp DateTime @default(now())
  details   Json?
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_history")
}

model Note {
  id          String           @id @default(cuid())
  userId      String           @map("user_id")
  content     String
  status      String           @default("active")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  layout      SandboxLayout?
  attachments TaskAttachment[]

  @@map("notes")
}

model SandboxLayout {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  noteId     String   @unique @map("note_id")
  positionX  Int      @default(0) @map("position_x")
  positionY  Int      @default(0) @map("position_y")
  width      Int      @default(300)
  height     Int      @default(200)
  zIndex     Int      @default(1) @map("z_index")
  isExpanded Boolean  @default(false) @map("is_expanded")
  color      String   @default("#FEF3C7")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  note       Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sandbox_layout")
}

model Habit {
  id          String            @id @default(cuid())
  userId      String            @map("user_id")
  name        String
  description String?
  icon        String            @default("‚úÖ")
  color       String            @default("#10B981")
  targetCount Int               @default(1) @map("target_count")
  streak      Int               @default(0)
  bestStreak  Int               @default(0) @map("best_streak")
  isActive    Boolean           @default(true) @map("is_active")
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  comments    HabitComment[]
  completions HabitCompletion[]
  frequency   HabitFrequency?
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("habits")
}

model HabitFrequency {
  id           String   @id @default(cuid())
  habitId      String   @unique @map("habit_id")
  type         String
  intervalDays Int      @default(1) @map("interval_days")
  daysOfWeek   Int[]    @map("days_of_week")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  habit        Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@map("habit_frequency")
}

model HabitCompletion {
  id          String   @id @default(cuid())
  habitId     String   @map("habit_id")
  date        DateTime @db.Date
  completedAt DateTime @default(now()) @map("completed_at")
  count       Int      @default(1)
  notes       String?
  habit       Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([habitId, date])
  @@map("habit_completions")
}

model HabitComment {
  id        String   @id @default(cuid())
  habitId   String   @map("habit_id")
  author    String
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@map("habit_comments")
}

model ThemeConfig {
  id                 String   @id @default(cuid())
  userId             String   @map("user_id")
  name               String
  description        String?
  primaryColor       String   @map("primary_color")
  secondaryColor     String   @map("secondary_color")
  surfaceColor       String   @map("surface_color")
  backgroundColor    String   @map("background_color")
  textColor          String   @map("text_color")
  textSecondaryColor String   @map("text_secondary_color")
  borderColor        String   @map("border_color")
  shadowColor        String   @map("shadow_color")
  mode               String   @default("light")
  borderRadius       String   @default("medium") @map("border_radius")
  iconSize           String   @default("medium") @map("icon_size")
  spacing            String   @default("normal")
  fontFamily         String   @default("system") @map("font_family")
  fontSize           String   @default("medium") @map("font_size")
  animations         Boolean  @default(true)
  glassmorphism      Boolean  @default(false)
  isPreset           Boolean  @default(false) @map("is_preset")
  isActive           Boolean  @default(false) @map("is_active")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("theme_configs")
}

model DailyEnergyLog {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  date            DateTime @db.Date
  budgetTotal     Int      @map("budget_total")
  energyUsed      Int      @default(0) @map("energy_used")
  energyRemaining Int      @default(0) @map("energy_remaining")
  tasksCompleted  Int      @default(0) @map("tasks_completed")
  createdAt       DateTime @default(now()) @map("created_at")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("daily_energy_logs")
}

model DopamineAnimation {
  id                  String    @id @default(cuid())
  userId              String    @map("user_id")
  isActive            Boolean   @default(false) @map("is_active")
  totalLeaves         Int       @default(0) @map("total_leaves")
  currentLeaves       Int       @default(0) @map("current_leaves")
  treeAge             Int       @default(0) @map("tree_age")
  lastGrowth          DateTime? @map("last_growth")
  lastCompletedTaskId String?   @map("last_completed_task")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  lastCompletedTask   Task?     @relation(fields: [lastCompletedTaskId], references: [id])
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("dopamine_animations")
}

model Achievement {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  type      String
  subtype   String?
  relatedId String?  @map("related_id")
  earnedAt  DateTime @default(now()) @map("earned_at")
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([userId, earnedAt])
  @@map("achievements")
}

model DailyProgress {
  id                    String   @id @default(cuid())
  userId                String   @map("user_id")
  date                  DateTime @db.Date
  plannedTasks          Int      @default(0) @map("planned_tasks")
  completedTasks        Int      @default(0) @map("completed_tasks")
  achievedMastery       Boolean  @default(false) @map("achieved_mastery")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  allHabitsCompleted    Boolean  @default(false) @map("all_habits_completed")
  completedEnergyPoints Int      @default(0) @map("completed_energy_points")
  plannedEnergyPoints   Int      @default(0) @map("planned_energy_points")
  celebrationShown      Boolean  @default(false) @map("celebration_shown")
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("daily_progress")
}

model HabitStreak {
  id            String    @id @default(cuid())
  userId        String    @unique @map("user_id")
  currentStreak Int       @default(0) @map("current_streak")
  bestStreak    Int       @default(0) @map("best_streak")
  lastCompleted DateTime? @map("last_completed")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("habit_streaks")
}

model Reminder {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  entityId          String?   @map("entity_id")
  entityType        String    @map("entity_type")
  type              String
  scheduledTime     String?   @map("scheduled_time")
  minutesBefore     Int?      @map("minutes_before")
  daysOfWeek        Int[]     @map("days_of_week")
  notificationTypes String[]  @map("notification_types")
  message           String?
  isActive          Boolean   @default(true) @map("is_active")
  lastSentAt        DateTime? @map("last_sent_at")
  nextScheduledAt   DateTime? @map("next_scheduled_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  intervalEnabled   Boolean   @default(false) @map("interval_enabled")
  intervalEndTime   String?   @map("interval_end_time")
  intervalMinutes   Int?      @map("interval_minutes")
  intervalStartTime String?   @map("interval_start_time")
  parentReminderId  String?   @map("parent_reminder_id")
  subType           String?   @map("sub_type")
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([nextScheduledAt])
  @@index([isActive])
  @@index([createdAt, isActive], map: "idx_reminders_created_at")
  @@index([type, isActive, nextScheduledAt], map: "idx_reminders_type_active")
  @@index([userId, entityId, entityType, isActive], map: "idx_reminders_user_entity")
  @@map("reminders")
}

model PushSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @map("user_id")
  endpoint               String    @unique
  p256dh                 String
  auth                   String
  userAgent              String?   @map("user_agent")
  isActive               Boolean   @default(true) @map("is_active")
  lastNotificationSent   DateTime? @map("last_notification_sent")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
  @@index([endpoint])
  @@map("push_subscriptions")
}

// ETAPA 4: Modelo para logging de seguran√ßa (P3)
model SecurityLog {
  id            String   @id @default(cuid())
  userId        String?  @map("user_id")
  event         String   // Tipo do evento (login_success, login_failed, etc)
  description   String   // Descri√ß√£o detalhada
  severity      String   // info, warning, critical
  ipAddress     String?  @map("ip_address")
  userAgent     String?  @map("user_agent")
  metadata      Json?    // Dados adicionais em formato JSON
  trackingId    String?  @map("tracking_id")
  createdAt     DateTime @default(now()) @map("created_at")
  
  // Relacionamento opcional com usu√°rio
  user          User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([event])
  @@index([severity])
  @@index([createdAt])
  @@index([trackingId])
  @@map("security_logs")
}
