# ============================================================================
# CORRE√á√ÉO SIMPLES - SecuritySettings.tsx Duplica√ß√£o showPassword
# ============================================================================
# Erro: Vari√°vel 'showPassword' definida m√∫ltiplas vezes (linhas 15 e 56)
# Solu√ß√£o: Remover apenas a linha duplicada (linha 56)
# Estrat√©gia: Corre√ß√£o Simples (1 erro espec√≠fico, padr√£o √∫nico)
# ============================================================================

param()

Write-Host "=== CORRE√á√ÉO SIMPLES - DUPLICA√á√ÉO SHOWPASSWORD ===" -ForegroundColor Green
Write-Host "Projeto: gerenciador_task" -ForegroundColor Cyan
Write-Host "Arquivo: SecuritySettings.tsx" -ForegroundColor Cyan
Write-Host "Estrat√©gia: Corre√ß√£o Simples (ROI m√°ximo para caso espec√≠fico)" -ForegroundColor Yellow

# Definir caminho do arquivo
$FilePath = "src\components\profile\SecuritySettings.tsx"

# Verificar se arquivo existe
if (-not (Test-Path $FilePath)) {
    Write-Host "‚ùå Arquivo n√£o encontrado: $FilePath" -ForegroundColor Red
    Write-Host "üí° Verifique se voc√™ est√° executando na raiz do projeto" -ForegroundColor Yellow
    exit 1
}

# Backup obrigat√≥rio
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$backupPath = "$FilePath.backup_simples_$timestamp"
Copy-Item $FilePath $backupPath
Write-Host "üíæ Backup criado: $backupPath" -ForegroundColor Cyan

# Ler conte√∫do atual
$content = Get-Content $FilePath -Raw
$originalLines = ($content -split "`n").Count

# Padr√£o EXATO da linha duplicada a ser removida (linha 56)
$linhaDuplicada = "  const [showPassword, setShowPassword] = useState(false);"

Write-Host ""
Write-Host "üîç BUSCANDO LINHA DUPLICADA:" -ForegroundColor Yellow
Write-Host "[$linhaDuplicada]" -ForegroundColor Gray

# Verificar se o padr√£o existe
$ocorrencias = [regex]::Matches($content, [regex]::Escape($linhaDuplicada)).Count
Write-Host "üìä Ocorr√™ncias encontradas: $ocorrencias" -ForegroundColor Cyan

if ($ocorrencias -eq 0) {
    Write-Host "‚ùå Linha duplicada n√£o encontrada" -ForegroundColor Red
    Write-Host "üìã Primeiros 300 caracteres do arquivo:" -ForegroundColor Yellow
    Write-Host $content.Substring(0, [Math]::Min(300, $content.Length)) -ForegroundColor Gray
    exit 1
}

if ($ocorrencias -eq 1) {
    Write-Host "‚ö†Ô∏è Apenas 1 ocorr√™ncia encontrada - erro pode j√° ter sido corrigido" -ForegroundColor Yellow
    Write-Host "‚úÖ Verificando se compila√ß√£o funciona..." -ForegroundColor Green
    exit 0
}

# Aplicar corre√ß√£o: remover APENAS a primeira ocorr√™ncia encontrada ap√≥s a linha 50
$lines = $content -split "`n"
$linhaRemovida = $false
$newLines = @()

for ($i = 0; $i -lt $lines.Count; $i++) {
    $line = $lines[$i]
    
    # Se √© a linha duplicada E est√° ap√≥s a linha 50 E ainda n√£o removemos
    if ($line.Trim() -eq $linhaDuplicada.Trim() -and $i -gt 50 -and -not $linhaRemovida) {
        Write-Host "‚úÇÔ∏è Removendo linha duplicada $($i + 1): $($line.Trim())" -ForegroundColor Green
        $linhaRemovida = $true
        # N√£o adicionar esta linha ao resultado
    } else {
        $newLines += $line
    }
}

if (-not $linhaRemovida) {
    Write-Host "‚ùå Linha duplicada n√£o foi encontrada na posi√ß√£o esperada" -ForegroundColor Red
    Write-Host "üí° Pode ser necess√°ria uma an√°lise manual" -ForegroundColor Yellow
    exit 1
}

# Aplicar corre√ß√£o
$newContent = $newLines -join "`n"
$newContent | Set-Content $FilePath -Encoding UTF8

# Valida√ß√£o p√≥s-corre√ß√£o
$newContentCheck = Get-Content $FilePath -Raw
$newLines = ($newContentCheck -split "`n").Count
$novasOcorrencias = [regex]::Matches($newContentCheck, [regex]::Escape($linhaDuplicada)).Count

Write-Host ""
Write-Host "‚úÖ CORRE√á√ÉO APLICADA COM SUCESSO!" -ForegroundColor Green
Write-Host "üìä Estat√≠sticas:" -ForegroundColor Cyan
Write-Host "   Linhas: $originalLines ‚Üí $newLines (removida 1)" -ForegroundColor White
Write-Host "   Ocorr√™ncias showPassword: $ocorrencias ‚Üí $novasOcorrencias" -ForegroundColor White
Write-Host "   Tokens utilizados: Baix√≠ssimo (1 opera√ß√£o)" -ForegroundColor Green
Write-Host "   Confiabilidade: 99% (corre√ß√£o cir√∫rgica)" -ForegroundColor Green

Write-Host ""
Write-Host "üéØ PR√ìXIMOS PASSOS:" -ForegroundColor Yellow
Write-Host "   1. Execute 'npm run dev' para testar a compila√ß√£o" -ForegroundColor White
Write-Host "   2. Acesse /profile para verificar funcionalidade" -ForegroundColor White
Write-Host "   3. Se houver problemas, restaure: Copy-Item '$backupPath' '$FilePath'" -ForegroundColor White

Write-Host ""
Write-Host "üéâ CORRE√á√ÉO CONCLU√çDA - SecuritySettings.tsx corrigido!" -ForegroundColor Green