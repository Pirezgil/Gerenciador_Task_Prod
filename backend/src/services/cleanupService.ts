import { prisma } from '../app';

/**
 * Remove permanentemente tarefas exclu√≠das h√° mais de 360 dias
 * Esta fun√ß√£o deve ser chamada periodicamente (ex: diariamente via cron job)
 */
export const cleanupDeletedTasks = async (): Promise<void> => {
  try {
    // Calcular data limite (360 dias atr√°s)
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - 360);

    console.log(`üßπ Iniciando limpeza de tarefas exclu√≠das antes de ${cutoffDate.toISOString()}`);

    // Buscar tarefas que devem ser removidas permanentemente
    const tasksToDelete = await prisma.task.findMany({
      where: {
        isDeleted: true,
        deletedAt: {
          lte: cutoffDate
        }
      },
      select: {
        id: true,
        description: true,
        deletedAt: true,
        userId: true
      }
    });

    if (tasksToDelete.length === 0) {
      console.log('‚úÖ Nenhuma tarefa antiga encontrada para limpeza');
      return;
    }

    console.log(`üóëÔ∏è  Encontradas ${tasksToDelete.length} tarefas para remo√ß√£o permanente`);

    // Remover permanentemente do banco (hard delete)
    const deletedCount = await prisma.task.deleteMany({
      where: {
        id: {
          in: tasksToDelete.map(task => task.id)
        }
      }
    });

    console.log(`‚úÖ Limpeza conclu√≠da: ${deletedCount.count} tarefas removidas permanentemente`);

    // Log das tarefas removidas (para auditoria)
    tasksToDelete.forEach(task => {
      console.log(`   - Tarefa "${task.description}" (ID: ${task.id}) do usu√°rio ${task.userId} exclu√≠da em ${task.deletedAt}`);
    });

  } catch (error) {
    console.error('‚ùå Erro durante limpeza de tarefas:', error);
    throw error;
  }
};

/**
 * Fun√ß√£o para obter estat√≠sticas de tarefas exclu√≠das
 * √ötil para monitoramento e relat√≥rios administrativos
 */
export const getDeletedTasksStats = async () => {
  try {
    const stats = await prisma.task.groupBy({
      by: ['userId'],
      where: {
        isDeleted: true
      },
      _count: {
        id: true
      },
      _min: {
        deletedAt: true
      },
      _max: {
        deletedAt: true
      }
    });

    const totalDeleted = await prisma.task.count({
      where: {
        isDeleted: true
      }
    });

    // Calcular quantas est√£o eleg√≠veis para limpeza
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - 360);

    const eligibleForCleanup = await prisma.task.count({
      where: {
        isDeleted: true,
        deletedAt: {
          lte: cutoffDate
        }
      }
    });

    return {
      totalDeletedTasks: totalDeleted,
      eligibleForCleanup,
      userStats: stats.map(stat => ({
        userId: stat.userId,
        deletedTasksCount: stat._count.id,
        oldestDeletion: stat._min.deletedAt,
        newestDeletion: stat._max.deletedAt
      }))
    };

  } catch (error) {
    console.error('‚ùå Erro ao obter estat√≠sticas de tarefas exclu√≠das:', error);
    throw error;
  }
};