import { HabitFrequency, HabitCompletion } from '@prisma/client';

export interface SequentialStreakResult {
  currentStreak: number;
  shouldReset: boolean;
  isNewRecord: boolean;
  isRequiredToday: boolean;
}

export interface HabitWithFrequency {
  id: string;
  streak: number;
  bestStreak: number;
  frequency: HabitFrequency | null;
}

export class HabitSequentialCalculator {
  
  /**
   * Verifica se hoje √© um dia configurado para o h√°bito
   * TODA L√ìGICA NO BACKEND
   */
  static isRequiredToday(frequency: HabitFrequency | null, today: Date): boolean {
    if (!frequency) return true; // Se n√£o tem frequ√™ncia, assumir di√°rio
    
    const dayOfWeek = today.getDay(); // 0=dom, 1=seg, ..., 6=sab
    
    console.log(`üîç Verificando se hoje (${dayOfWeek}) √© obrigat√≥rio para tipo: ${frequency.type}`);
    
    switch (frequency.type) {
      case 'daily':
        console.log('   ‚úÖ Di√°rio - sempre obrigat√≥rio');
        return true;
      
      case 'weekly':
      case 'custom':
        const isRequired = frequency.daysOfWeek?.includes(dayOfWeek) || false;
        console.log(`   üìÖ Semanal/Custom - dias: [${frequency.daysOfWeek}] - obrigat√≥rio: ${isRequired}`);
        return isRequired;
      
      case 'weekdays':
        const isWeekday = dayOfWeek >= 1 && dayOfWeek <= 5; // Seg-Sex
        console.log(`   üíº Dias √∫teis - obrigat√≥rio: ${isWeekday}`);
        return isWeekday;
      
      case 'interval':
        // Para intervalos, vamos implementar l√≥gica mais complexa depois
        console.log('   ‚è∞ Intervalo - implementa√ß√£o futura');
        return true;
      
      default:
        console.log('   ‚ùì Tipo desconhecido - assumindo n√£o obrigat√≥rio');
        return false;
    }
  }
  
  /**
   * Verifica se tem completion para uma data espec√≠fica
   */
  private static hasCompletionForDate(completions: HabitCompletion[], targetDate: Date): boolean {
    const targetTime = targetDate.getTime();
    
    return completions.some(completion => {
      const completionDate = new Date(completion.date);
      completionDate.setHours(0, 0, 0, 0);
      return completionDate.getTime() === targetTime;
    });
  }
  
  /**
   * Calcula streak sequencial - L√ìGICA PRINCIPAL NO BACKEND
   * Esta fun√ß√£o √© chamada toda vez que um h√°bito √© completado
   * 
   * DIFERENCIA√á√ÉO ENTRE H√ÅBITOS DI√ÅRIOS E N√ÉO-DI√ÅRIOS:
   * - Di√°rios: Consecutividade rigorosa, perder 1 dia quebra streak
   * - N√£o-di√°rios: L√≥gica sequencial, s√≥ conta dias configurados
   */
  static calculateSequentialStreak(
    habit: HabitWithFrequency,
    allCompletions: HabitCompletion[],
    today: Date
  ): SequentialStreakResult {
    
    console.log(`üßÆ Calculando streak para h√°bito ${habit.id}`);
    console.log(`   - Tipo: ${habit.frequency?.type || 'sem frequ√™ncia'}`);
    console.log(`   - Streak atual: ${habit.streak}`);
    console.log(`   - Best streak: ${habit.bestStreak}`);
    console.log(`   - Total completions: ${allCompletions.length}`);
    
    // Diferenciar l√≥gica baseada no tipo de h√°bito
    if (habit.frequency?.type === 'daily') {
      // H√ÅBITOS DI√ÅRIOS - Consecutividade rigorosa
      return this.calculateDailyStreak(habit, allCompletions, today);
    } else {
      // H√ÅBITOS N√ÉO-DI√ÅRIOS - L√≥gica sequencial
      return this.calculateNonDailyStreak(habit, allCompletions, today);
    }
  }
  
  /**
   * L√≥gica RIGOROSA para h√°bitos di√°rios
   * Perder 1 dia quebra a sequ√™ncia ‚Üí streak = 0
   */
  private static calculateDailyStreak(
    habit: HabitWithFrequency,
    allCompletions: HabitCompletion[],
    today: Date
  ): SequentialStreakResult {
    
    console.log('üî• Aplicando l√≥gica DI√ÅRIA (consecutividade rigorosa)');
    
    const todayNormalized = new Date(today);
    todayNormalized.setHours(0, 0, 0, 0);
    
    const completedToday = this.hasCompletionForDate(allCompletions, todayNormalized);
    console.log(`   - Completou hoje: ${completedToday}`);
    
    if (completedToday) {
      // Completou hoje, calcular streak baseado em consecutividade
      const consecutiveStreak = this.calculateConsecutiveDays(allCompletions, today);
      const isNewRecord = consecutiveStreak > habit.bestStreak;
      
      console.log(`   üî• Dias consecutivos calculados: ${consecutiveStreak}`);
      console.log(`   üèÜ Novo recorde: ${isNewRecord}`);
      
      return {
        currentStreak: consecutiveStreak,
        shouldReset: false,
        isNewRecord: isNewRecord,
        isRequiredToday: true
      };
    } else {
      // N√£o completou hoje, manter streak atual (ser√° resetado pelo job di√°rio)
      return {
        currentStreak: habit.streak,
        shouldReset: false,
        isNewRecord: false,
        isRequiredToday: true
      };
    }
  }
  
  /**
   * L√≥gica SEQUENCIAL para h√°bitos n√£o-di√°rios
   * A cada dia completado ‚Üí streak + 1 (apenas em dias configurados)
   */
  private static calculateNonDailyStreak(
    habit: HabitWithFrequency,
    allCompletions: HabitCompletion[],
    today: Date
  ): SequentialStreakResult {
    
    console.log('üìÖ Aplicando l√≥gica N√ÉO-DI√ÅRIA (sequencial)');
    
    // 1. Verificar se hoje √© dia obrigat√≥rio
    const isRequiredToday = this.isRequiredToday(habit.frequency, today);
    console.log(`   - √â obrigat√≥rio hoje: ${isRequiredToday}`);
    
    if (!isRequiredToday) {
      // Hoje n√£o √© dia do h√°bito, manter streak atual
      console.log('   ‚û°Ô∏è Hoje n√£o √© dia obrigat√≥rio, mantendo streak');
      return {
        currentStreak: habit.streak,
        shouldReset: false,
        isNewRecord: false,
        isRequiredToday: false
      };
    }
    
    // 2. Se √© dia obrigat√≥rio, verificar se completou hoje
    const todayNormalized = new Date(today);
    todayNormalized.setHours(0, 0, 0, 0);
    
    const completedToday = this.hasCompletionForDate(allCompletions, todayNormalized);
    console.log(`   - Completou hoje: ${completedToday}`);
    
    if (completedToday) {
      // Completou hoje em dia obrigat√≥rio, incrementar sequencialmente
      const newStreak = habit.streak + 1;
      const isNewRecord = newStreak > habit.bestStreak;
      
      console.log(`   üéâ Incremento sequencial: ${habit.streak} ‚Üí ${newStreak}`);
      
      return {
        currentStreak: newStreak,
        shouldReset: false,
        isNewRecord: isNewRecord,
        isRequiredToday: true
      };
    } else {
      // N√£o completou hoje, manter streak (ser√° verificado pelo job di√°rio)
      return {
        currentStreak: habit.streak,
        shouldReset: false,
        isNewRecord: false,
        isRequiredToday: true
      };
    }
  }
  
  /**
   * Calcula dias consecutivos para h√°bitos di√°rios
   * Verifica consecutividade rigorosa desde hoje para tr√°s
   */
  private static calculateConsecutiveDays(
    allCompletions: HabitCompletion[],
    today: Date
  ): number {
    
    console.log('üîç Calculando dias consecutivos...');
    
    // Ordenar completions por data (mais recente primeiro)
    const sortedCompletions = allCompletions
      .map(c => ({
        ...c,
        normalizedDate: new Date(c.date.getTime())
      }))
      .sort((a, b) => b.normalizedDate.getTime() - a.normalizedDate.getTime());
    
    let consecutiveDays = 0;
    const todayNormalized = new Date(today);
    todayNormalized.setHours(0, 0, 0, 0);
    
    // Verificar consecutividade desde hoje para tr√°s
    for (let i = 0; i < 365; i++) { // M√°ximo 1 ano para tr√°s
      const checkDate = new Date(todayNormalized.getTime() - (i * 24 * 60 * 60 * 1000));
      checkDate.setHours(0, 0, 0, 0);
      
      const hasCompletion = sortedCompletions.some(completion => {
        const compDate = new Date(completion.date);
        compDate.setHours(0, 0, 0, 0);
        return compDate.getTime() === checkDate.getTime();
      });
      
      if (hasCompletion) {
        consecutiveDays++;
        console.log(`   ‚úÖ ${checkDate.toLocaleDateString('pt-BR')}: Completado (${consecutiveDays} dias)`);
      } else {
        console.log(`   ‚ùå ${checkDate.toLocaleDateString('pt-BR')}: N√ÉO completado - QUEBRA consecutividade`);
        break; // Quebra a sequ√™ncia
      }
    }
    
    console.log(`   üéØ Total de dias consecutivos: ${consecutiveDays}`);
    return consecutiveDays;
  }
  
  /**
   * Verifica se deve resetar streak baseado em dias perdidos anteriores
   */
  private static checkIfShouldReset(
    habit: HabitWithFrequency,
    allCompletions: HabitCompletion[],
    today: Date
  ): SequentialStreakResult {
    
    console.log('üîç Verificando se deve resetar streak...');
    
    // Por simplicidade inicial, vamos manter o streak se ainda n√£o completou hoje
    // A l√≥gica de reset ser√° aplicada pelo job di√°rio
    
    return {
      currentStreak: habit.streak,
      shouldReset: false,
      isNewRecord: false,
      isRequiredToday: true
    };
  }
  
  /**
   * Fun√ß√£o para resetar streaks que expiraram (chamada por job di√°rio)
   * TODA VERIFICA√á√ÉO NO BACKEND
   */
  static shouldResetStreak(
    habit: HabitWithFrequency,
    allCompletions: HabitCompletion[],
    today: Date
  ): boolean {
    
    console.log(`üîç Verificando se deve resetar streak para ${habit.id}`);
    
    // Se n√£o √© dia obrigat√≥rio, n√£o resetar
    if (!this.isRequiredToday(habit.frequency, today)) {
      console.log('   ‚û°Ô∏è Hoje n√£o √© dia obrigat√≥rio, n√£o resetar');
      return false;
    }
    
    // Se √© dia obrigat√≥rio e n√£o completou, resetar
    const todayNormalized = new Date(today);
    todayNormalized.setHours(0, 0, 0, 0);
    
    const completedToday = this.hasCompletionForDate(allCompletions, todayNormalized);
    
    if (!completedToday && habit.streak > 0) {
      console.log('   ‚ùå N√£o completou em dia obrigat√≥rio, RESETAR');
      return true;
    }
    
    console.log('   ‚úÖ N√£o precisa resetar');
    return false;
  }
  
  /**
   * Fun√ß√£o auxiliar para buscar √∫ltimo dia obrigat√≥rio
   */
  private static getLastRequiredDay(frequency: HabitFrequency | null, today: Date): Date | null {
    if (!frequency) return null;
    
    // Implementa√ß√£o simples - buscar at√© 7 dias atr√°s
    for (let i = 1; i <= 7; i++) {
      const checkDate = new Date(today);
      checkDate.setDate(checkDate.getDate() - i);
      
      if (this.isRequiredToday(frequency, checkDate)) {
        return checkDate;
      }
    }
    
    return null;
  }
}

export default HabitSequentialCalculator;