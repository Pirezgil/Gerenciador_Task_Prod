const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function debugOverdueReminders() {
  try {
    console.log('üîç DEBUG: Analisando lembretes em atraso detalhadamente');
    
    const now = new Date();
    const overdueReminders = await prisma.reminder.findMany({
      where: {
        isActive: true,
        nextScheduledAt: {
          lte: now
        }
      },
      orderBy: { nextScheduledAt: 'asc' }
    });
    
    console.log('\nüìä LEMBRETES EM ATRASO:', overdueReminders.length);
    
    overdueReminders.forEach((reminder, index) => {
      console.log(`\n${index + 1}. Lembrete ID: ${reminder.id}`);
      console.log(`   Tipo: ${reminder.type}`);
      console.log(`   Subtipo: ${reminder.subType || 'N/A'}`);
      console.log(`   Era para disparar: ${reminder.nextScheduledAt}`);
      console.log(`   √öltima enviada: ${reminder.lastSentAt || 'Nunca'}`);
      console.log(`   Ativo: ${reminder.isActive}`);
      console.log(`   Dias da semana: [${reminder.daysOfWeek.join(', ')}]`);
      console.log(`   Hor√°rio agendado: ${reminder.scheduledTime || 'N/A'}`);
      console.log(`   Minutos antes: ${reminder.minutesBefore || 'N/A'}`);
      
      // An√°lise do problema
      if (reminder.type === 'before_due') {
        console.log(`   üîç AN√ÅLISE: Este √© um lembrete 'before_due' (antes do vencimento)`);
        console.log(`   üìù PROBLEMA: markReminderAsSent n√£o trata este tipo - deveria desativar ap√≥s envio`);
      }
      
      if (reminder.lastSentAt && reminder.isActive) {
        const minutesSinceSent = Math.round((now.getTime() - new Date(reminder.lastSentAt).getTime()) / (1000 * 60));
        console.log(`   ‚ö†Ô∏è INCONSIST√äNCIA: Enviado h√° ${minutesSinceSent} min mas ainda ativo`);
      }
    });
    
    console.log('\nüí° DIAGN√ìSTICO:');
    console.log('   - O scheduler est√° funcionando (105 lembretes processados)');
    console.log('   - O problema est√° na fun√ß√£o markReminderAsSent()');
    console.log('   - Lembretes "before_due" n√£o s√£o desativados ap√≥s envio');
    console.log('   - Isso faz com que apare√ßam como vencidos eternamente');
    
    console.log('\nüîß SOLU√á√ÉO NECESS√ÅRIA:');
    console.log('   - Modificar markReminderAsSent para desativar lembretes "before_due" ap√≥s envio');
    console.log('   - Ou definir nextScheduledAt para null para estes tipos');
    
  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await prisma.$disconnect();
  }
}

debugOverdueReminders();